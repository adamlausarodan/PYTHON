# -*- coding: utf-8 -*-
"""intro python 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KQCZu9rX3Dn7lCQXlDxhvuPXxrq8DytX

# IF ELSE IF DAN ELSE

## 1.1 penggunaan ig
"""

#coba ubah nilai jenis dibawah menjadi "kucing" atau hal lainnya
#kode blok tidak mememnuhi syarat tidak akan dijalankan

nama = "Adam"
jenis = "orang"

if jenis == "Manusia":   # "=" ada 2 karena perbandingan
    print(nama, "adalah manusia")
    print
elif jenis == "kucing":  # Tambahkan titik dua di akhir
    print(nama, "adalah kucing")  # Indentasi ke dalam
else:
    print(nama, "tidak dapat diidentifikasi")  # Indentasi ke dalam

# nama dan jenis diatas tidak terhubung, inilah saatnya kita coba data jenis dictionary
#kita dapat menggabungkan dua nilai tersebut dalam satu varible dictionary\
makhluk_1 = {
    "nama": "Adam",
    "jenis": "manusia"
}
if makhluk_1["jenis"] == "manusia":
  print(makhluk_1["nama"], "adalah manusia")
elif jenis == "kucing":
  print(mahkluk_1["nama"], "adalah kucing")
else:
    print(makhluk_1["nama"], "tidak dapat di identifikasi")

#kenapa menggunakan ==
print (a ==2)#maka a= 3 tapi 3 tidak masuk kedalam a
# jika a == 3 dimasukkan ke dalam a jika a = 2  maka akan terjadi false
a == 2
print(a)

# penggunaan logika 'and',kedua kondisi harus dipenuhi
makhluk_1 = {
    "nama": "Adam" ,
    "jenis": "manusia" ,
    "umur":20
    }
if(makhluk_1["jenis"] =="manusia") and (makhluk_1["umur"] <= 30) or (makhluk_1["nama"][0] == "I"):
  print(makhluk_1["nama"], "masih muda", "atau huruf pertama A")
else:   #else harus sejajar dengan if
    print("awikwok")

# penggunaan logika 'and',kedua kondisi harus dipenuhi rentang
makhluk_1 = {
    "nama": "Adam" ,
    "jenis": "manusia" ,
    "umur":20
    }

if makhluk_1["umur"]<=25 and makhluk_1["umur"]>=18:
    print("umur antara 18~25", makhluk_1["nama"])

"""# Mini task 1.1 : Buat logik pengecekan sederhana

ubahlah kode block dibawah untuk pengecekan jika jenis makhluk adalah kucing,gunakan kriteria berikut:
*   berat > 12 kg,print("Kucing ini chonk"),tambahkan status pada dictionary sesuai dengan pesan tersebut
*   berat 8~12 kg, print("Kucing nicely weight!"),tambahkan status pada dictionary sesuai pesan tersebut
*   berat < 8 kg,print("Kasih whiskas yang banyak"),tambahkan status pada dictionary sesaui pesan tersebut

Contoh hasil dictiionary akhir jika berat kucing adalah 13kg

*  {"nama": "Kuro",
*  "jenis": " kucing",
*  "berat": 13,
*   "status" : "Kucing ini chonk"
}
"""

#kondisi menggunakan and
makhluk_1 = {
    "nama":"Kuro",
    "jenis": "kucing",
    "berat": 8
}

# kondisi 1 makhluk kucing dan berat >12
if ( makhluk_1["jenis"] == "kucing") and (makhluk_1["berat"] > 12):
    makhluk_1["status"] = "kucing gendut"

# kondisi 2 makhluk kucing dan berat 8<=berat<=12
elif ( makhluk_1["jenis"] == "kucing") and (makhluk_1["berat"] >= 8 and makhluk_1["berat"] <= 12):
    makhluk_1["status"] = "kucing ideal"

# kondisi 3 makhluk kucing dan berat <8
elif ( makhluk_1["jenis"] == "kucing") and (makhluk_1["berat"] <8 ):
    makhluk_1["status"] = "kucing ideal"
print(makhluk_1["status"])

makhluk_1 = {
    "nama":"Kuro",
    "jenis": "manusia",
    "berat": 8
}

if makhluk_1["berat"] > 13:
  makhluk_1.update({"status":"Kucing ini chonk"})
elif makhluk_1["berat"] >= 8 and makhluk_1["berat"] <= 12 :
  makhluk_1.update({"status":"Kucing nicely weight!"})
elif makhluk_1["berat"] < 8 :
  makhluk_1.update({"status":"Kasih whiskas yang banyak"})
print(makhluk_1)

# jika ingin ada else
makhluk_1 = {
    "nama": "Kuro",
    "jenis": "manusia",
    "berat": 10
}

kucing_berat = (makhluk_1["jenis"] == "kucing") and (makhluk_1["berat"] > 12)
kucing_sedang = (makhluk_1["jenis"] == "kucing") and (8 <= makhluk_1["berat"] <= 12)
kucing_kurus = (makhluk_1["jenis"] == "kucing") and (makhluk_1["berat"] < 8)

if kucing_berat:
    makhluk_1["status"] = "Kucing Gendut"
elif kucing_sedang:
    makhluk_1["status"] = "Kucing Normal"
elif kucing_kurus:
    makhluk_1["status"] = "Kucing Kurus"
else:
    print("semua kondisi tidak terpenuhi")  # Ini akan dijalankan jika 'jenis' bukan 'kucing'

print(makhluk_1)

"""# WHILE LOOP AND FOR LOOP

## WHILE LOOP
digunakan untuk eksekusi berulang selama ekspresinya true
"""

# while loop
#jika nilai masih dibawah 1000 ,dan tambahkan nilainya sebanyak 100 setiap loop

money = 100
while money < 1000:
  print (money)
  money = money + 100

"""## FOR LOOP
dengan iterasi nilai pada dictionary collection
"""

# mari gunakan list of dictionaty tentang dua kucing dari atas
my_cat1 = {
    'size': 'fat',
    'color': 'gray',
    'disposition': 'loud'
}

my_cat2 = {
    'size': 'fat',
    'color': 'black',
    'disposition': 'quiet'
}

list_of_kucing = [my_cat1, my_cat2]
list_of_kucing

# dengan for loop kita bisa iterasi semua anggota dari list_of_kucing
# i sebagai index
i = 5
for kucing in list_of_kucing:
  #untuk tiap iterasi anggota list akan di assign ke varialbe kucing
  print("Anggota", i, "color", kucing ["color"])
  print(kucing)
  i = i + 1

# protips di python, dibanding menggunakan index yang ditambah semua setiap iterasi, kita dapat gunakan fungsi enumerate
#dengan fo loop kita bisa iterasi semua anggota dari list_of_kucing
#i sebagai index
for i, kucing in enumerate(list_of_kucing, 1):
  #untuk tiap iterasi, anggota list akan di assign ke variable kucing
  print("Anggota", i, "color", kucing["color"])

# tips , untuk membuat loop 10 kali , kita bisa menggunakan fungsi range
for i in range(10):
  print("iterasi", i+1)

# untuk index dari 1 ,kita bisa lakukan seperti berikut
for i in range(1,11):
  print(i)

#hitung fibonnaci
n = 12
cur_num = 1
prev_num = 1
for i in range(1,n+1):
  print(cur_num)
  prev_num,cur_num = cur_num, cur_num + prev_num

"""## 1.2 mini task loop

buat loop yang mencetak nilai 1 sampai n, dengan aturan berikut


1.  jika angka yang dicetak kelipatan 3,gantilah dengan text "door"
2.   jika angka yang dicetak kelipatan 5,gantilah dengan text "boom"
3.   jika angka yang dicetak kelipatan 3 dan 5,gantilah dengan text "wusshhh"

*  contoh jika n = 15 maka akan tercetak
*   1
*   2
*  door
*   4
*  boom
*  door
*   7
*   8
*   door
*   boom
*   11
*   door
*   13
*   14
*   wusshh
"""

n = 15  # Ubah nilai n sesuai kebutuhan

for i in range(1, n + 1):
    if i % 3 == 0 and i % 5 == 0:
        print("wusshhh")
    elif i % 3 == 0:
        print("door")
    elif i % 5 == 0:
        print("boom")
    else:
        print(i)

"""# FUNGSI
memasukkan argumen untuk melakukan tugas
"""

def apakah_orang(jenis):
    if jenis == "orang":
        return True
    else:
        return False
# Memanggil fungsi dan mencetak hasilnya
hasil = apakah_orang("kucing")
print(hasil)  # Ini akan mencetak False

def pangkat_tiga(v):
  print("argumen v=", v)
  return v**3

pangkat_tiga(3)

def lihat_anggota_kucing(kucings):
  for i, kucing in enumerate(kucings, 10):
    #untuk tiap iterasi, anggota list akan di assign ke variable kucing
    print("Anggota", i, "| size:", kucing["size"],"| color:", "|disposition:", kucing["disposition"])

my_cat1 = {
    'size': 'fat',
    'color': 'gray',
    'disposition': 'loud'
}

my_cat2 = {
    'size': 'fat',
    'color': 'black',
    'disposition': 'quiet'
}

list_of_kucing = [my_cat1, my_cat2]
list_of_kucing

lihat_anggota_kucing(list_of_kucing)

"""# Final exercise hari ini
asumsukan perusahaan mendapatkan keuntungan bersih pada bulan pertama sebesar y% setiap bulannya. berapa total keuntungan perusahaan pada bulan ke n relatif terhadap modal awal

sebagai bahan referensi untuk x= 10% dan y=10%


*   bulan 1 = 10%
*   bulan 2 = 10%*110%(karena profitnya bertambah 10% tiap bulan dari nilai bulan sebelumnya
*   bulan 3 = 10%*110%*110%
*   total profit dalam 3 bulan jumlahkan semua nilai sekitar 33,10% dari modal awal




"""

x = 0.1  # Profit growth
y = 0.1  # Initial profit
n = 0
def calculate_total_profit(profit_b1, profit_growth, n_month):
    total_profit = 0  # Inisialisasi total profit
    for month in range(n_month):
        total_profit += profit_b1 * (1 + profit_growth) ** month  # Hitung profit untuk setiap bulan
    return total_profit

# Menghitung total profit untuk 3 bulan
total_profit = calculate_total_profit(
    profit_b1=y,  # profit_b1 seharusnya adalah profit bulan pertama
    profit_growth=x,  # profit_growth
    n_month=3
)

print(total_profit)

"""# 3 IMPORT MODULE"""

!pip install pandas

"""import packages"""

import numpy
array_1 = numpy.array([1,2,3]) #konstruksi array  dengan memasukkan list kedalama argumen numpy.arrat

import numpy as np
array_1 = numpy.array([1,2,3])

from numpy import array
array_1 = numpy.array([1,2,3])