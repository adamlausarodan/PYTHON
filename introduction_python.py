# -*- coding: utf-8 -*-
"""introduction python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OCaVdaMKLT7P-0IQpFXO4PRZ_hJtvPo3

# MINI TASK 1.1 : Menggunakan Python Kalkulator
"""

# tanda "#" untuk membuat comment di python
# 1 + 1 operasi paling sederhana
1 + 1/2

# operator akan di perikas sesuai urutan prioritas
1 - 1 *2

"""Hitung menggunakan python

1. Asumsikan perusahaan mendapatkan keuntungan bersih pada bulan pertama sebesar 10% setiap bulannya.Berapa total keuntungan perusahaan pada bulan ke 3 relatif terhadap modal awal?

pertumbuhan 10 persen setiap bulannya
"""

0.1 + 0.1*(1+0.1) + 0.1*(1 + 0.1)**2

"""2.jika pinjol ilegal mensyaratkan bunga sebesar 10% per-bulan dari total tunggakan bulan tersebut(bukan dari jumlah pinjaman), dan budi meminjam uang sebesar 1 juta. berapa uang yang harus dibayar budi setelah 12 bulan? dengan asumsi budi tidak mencicil bayaran sama sekali selama 12 bulan"""

1000000 * (1+0.1)**12

"""# 1.2 Variable dan Data type

Variable digunakan untuk menampilkan data/nilai. Variable ditetapkan dengan menggunakan =
print untuk mencetak isi variable pada console

2.Variable dan Data Type
"""

nilai = 1
nama = "adam"
print (nama, nilai)

"""Data type dapat mengetahui tipe data pada variable/ nilai yang telah didefinisikan dengan menggunakn fungsi type()

menetapkan variable dengan menggunakan = Data type dari nilai yang ditetapkan variableakan secara otomatis ditentukan oleh python
Gunakan fungsi type() untuk mengetahui data type suatu variable
"""

#blok tidak dapat menghasilakan output
umur = 20.1
nama = 'Adam Bandung'
print(umur)

#gunakan fungsi print() untuk mencetak nilai pada varible
#blok tidak dapat menghasilakan output
print(nama, umur)
print("atau bisa print tanpa menetapkan varible terlebih dahulu")

#cek data type
print ("data type nama:", type(nama))
print ("data type nama:", type(umur))

#(variable) umur_setelah_2_tahun: float le, dapat di manipulasi dengan operator matematik
umur_setelah_2_tahun = umur +2
print(umur_setelah_2_tahun)

"""# MINI TASK 1.2: Lengkapi kode untuk menjawab pertanyaan berikut

asumsikan perusahaan dapat keuntungan bersih pada bulan pertama pertama sebesasr x% dari modal awalnya, dengan pertumbuhan keuntungan sebesar y% setiap bulannya.berapa total keuntungan perubahan pada bulan ke 3 relatif terhadap modal awal?
(x dan y merupakan variable yang dapat kita ubah nilainya)
"""

x = 0.2 # keuntungan bulan pertama
y = 0.05 # keuntungan bulanan

total_keuntungan = x + (x*(1+y)) + (x*(1+y)**2)

print("total_keuntungan:", total_keuntungan)

"""$\sum_(i=0)^n x*(1+y)^i$

## Koleksi Data

## LIST & TUMPLE

List di definisikan dengan [] sementara tuple dengan (). Keduanya hampir sama.Hanya tuple isinya tidak dapat diubah. Tuple lebih hemat memory dibandungkan lisy
"""

# definisi
list_a = [1,2,3,"b"]
tuple_a = (1,2,3,"b")
print(list_a, tuple_a)

#konveris tuple ke list dan sebaliknya
print(tuple(list_a), list(tuple_a))

# index adalah identitas/alamat yang mengarah kepada komponen atau dalam list
# indek pada angka 1 ada  indeks
#         0    1    2
data1 = ['a', 'b', 'c']
#         -3    -2   -1     INDEK NEGATIF

# 0,1,2

print(data1[0])


#jika indek ke yang diambil indek 0 dari data 1
#maka akan tampil 'a'

# mendapatkan nilai individual dengan indeks. indeks dimulai dari 0
print("komponen pertama", list_a[3])
print("komponen kedua", tuple_a[1])

print("index -1", list_a[-1])

text = "the quick brown fox jump over a lazy dog"
text[-30:]    #menampilkan karakter
text[::-1]   #untuk membalik kalimat
len(text)    #mengetahui panjang karakter
text.upper()  #mengubah agar huruf besar

"-".join(["asdfa", "dsfa","sfwer"]) #memanipulasi otomatis

#index slicing .Slicing bersifat exclusive untuk komponen terakhir
print("komponen pertama", list_a[0:3]) # index 3 tidak termasuk
print("komponen kedua", list_a[0:2]) # index 2 tidak termasuk

# mengubah nilai dalam index .hanya berlaku untuk list,tuple tidak bisa di ubah
list_a = [1,2,3,"b"]
list_a[0] = 'komponen 1 diubah'
print(list_a)

# menambah isi list
list_a.append(5)
print(list_a)

# menambah isi list
list_a.insert(3,'ini data baru')
print(list_a)

#menghapus komponen list secar berurutan dari komponen terakhir
list_a.pop()
print(list_a )

"""# SET DATA

## 2.1 SET

List di definisikan dengan {} .Karakteristik dari komponen set adalah nilainya untuk dan tidak mengenal urutan. Karena karakteristik tersebut,set seirng digunakan untuk manipulasi komponen antar dua set. seperti intersection,union,etc
"""

set_a = {1,2,3,4}
set_b = {3,4,5,6}

#intersection a dan b
set_a & set_b

# union a dan b
set_a | set_b

{1, 2, 3, 4, 5, 6}

# component a yang bukan bagian dari b
set_a - set_b

# set tidak mengenal urutan maupun index
set_a[0]

"""## 2.2 DICTIONARY

menyimpan data value bersamaan dengan key
key-value
"""

my_cat = {
    'size' : 'fat',
    'color' : 'gray',
    'disposition' : 'loud'
}

#mengambil nilai pada dictionary dengan key "size"
print(my_cat["size"])
print(my_cat.get("random"))

print(my_cat.get["status"])
print(my_cat("status")) # akses value dengan cara ini, akan menghasilkan error jika key tidak ditemukan

#mengisi dictionary dengan ker-value pair baru
my_cat["status"] = "being cute"
my_cat

"""dapat menumpuk satu data collection type dengan yang lainnya"""

#comtoh 1 : list of dictionary
my_cat1 = {
    'size' : 'fat',
    'color' : 'gray',
    'disposition' : 'loud'
}
my_cat2 = {
    'size' : 'fat',
    'color' : 'black',
    'disposition' : 'quiet'
}

list_of_dictionary = [my_cat1, my_cat2]
list_of_dictionary

#ambil data kucing ke-2
list_of_dictionary[1]

matrix =[[1,2],[3,4]]
matrix[0]

"""# MINI TASK 2.1 : modifikasi data "kompleks

1. bagaimana memodifikasi list_of_dictionary agar nilai "color" pada dictionary index ke-2 menjadi "white

Ekspektasi output:

  

1.   [{'size': 'fat', 'color': 'gray', 'disposition': 'loud'},
2.   {'size': 'fat', 'color': 'black', 'disposition': 'quiet'}]
"""

#silahkan lakukan modifikasi pada list of dictionary dibawah
list_of_dictionary[1]["color"]="white"
print(list_of_dictionary)